@import org.openmole.site._
@import org.openmole.site.tools._
@import org.openmole.site.stylesheet._
@import DocumentationPages._



@h2{Overview}

OpenMOLE is a model exploration tool.
It offers several methods to perform experiments on a model, in order to better understand its behavior and capabilities.

@br

The composition of a full exploration experiment is achieved by writing a script in the @a("OpenMOLE language", href := language.file), which is an extension of the Scala language.
Such a script is called a @i{workflow} and should contain:
  @ul
    @li
      some @a("tasks", href := plug.file + "#Tasks") (the model to explore needs to be embedded in a task for instance),
    @li
      their inputs and outputs as @a("objects", href := language.file + "#Constructobjects"),
    @li
      an @a("exploration method", href := explore.file),
    @li
      some @a("hooks", href := hook.file) to save or display the results of the exploration,
    @li
      and optionally, an @a("execution environment", href := scale.file).



@h2{Installing OpenMOLE on your computer}

After @aa("downloading OpenMOLE", href := download.file + "#InstallOpenMOLE"), launch it by executing the @i{openmole} file in the installation directory with the @code{./openmole} command in a terminal.
Once OpenMOLE is up and running in your browser, you should see the GUI:

@img(src := Resource.img.guiGuide.emptyGUI.file, `class` := "uiScreenshot", width := "100%")



@h2{Importing a toy model: Ants}

To illustrate this tutorial, we will be using the Ants model from the NetLogo library.
The model is available @aa("here", href := Resource.script.antsNLogo.file).

@br

Once you've downloaded the model on your computer, you need to import it in OpenMOLE.
There are two ways to do that, either by using the "upload a file" button on the left series of icons to import the @i{.nlogo} file as is, or by using the "New project" button and selecting "Import your model" to open the model wizard.
The model wizard will automatically detect the language in which the file is written, and the input and output parameters of your model:

@img(src := Resource.img.tutorial.modelImport.file, width := "100%")



@h2{Executing the Ants model in OpenMOLE}

@h3{Workflow}
Based on the automatically detected parameters and NetLogo commands, the model wizard creates an OpenMOLE script containing variables for the inputs and outputs, and a basic workflow to run your model.
If you didn't use the model wizard to import the Ants model, you will need to write a workflow to execute it, similar to the one generated by the wizard and containing all the basics.
The @i{.oms} script generated for the Ants model is shown here:

@hl.openmole("""
// Input values
val mySeed = Val[Int]
val diffusionRate = Val[Int]
val evaporationRate = Val[Int]
val population = Val[Int]

// Output values
val countFood = Val[Double]
val finalTicksFood1 = Val[Double]
val finalTicksFood2 = Val[Double]
val finalTicksFood3 = Val[Double]

// NetLogo commands list
val launch = List(
    "setup",
    "go ;;You should set your stopping criteria here instead"
)

// NetLogo task
val antsTask = NetLogo6Task(
    workDirectory / "ants.nlogo", // netlogo file
    launch,                       // launching commands
    seed = mySeed                 // set the random seed
) set (
    inputs += diffusionRate mapped "diffusion-rate",
    inputs += evaporationRate mapped "evaporation-rate",
    inputs += population mapped "population",

    outputs += countFood mapped "count-food",
    outputs += finalTicksFood1 mapped "final-ticks-food1",
    outputs += finalTicksFood2 mapped "final-ticks-food2",
    outputs += finalTicksFood3 mapped "final-ticks-food3",

    // Default values. Can be removed if OpenMOLEÂ Vals are set by values coming from the workflow
    mySeed := 0,
    diffusionRate := 21,
    evaporationRate := 9,
    population := 125
)

// Workflow containing a hook to display execution outputs
antsTask hook display
""")


@h3{Execution of the workflow}
To execute a workflow you just need to have the oms script open in the GUI and click on the "Run" button.
The execution panel will then open for you to monitor the execution, as shown below:

@img(src := Resource.img.tutorial.modelExecution.file, width := "100%")


@h3{Model outputs}

Once the model execution is over, and since we asked in the workflow to @code{display} the outputs, we can look at the output values @code{countFood}, @code{finalTicksFood1}, @code{finalTicksFood2}, and @code{finalTicksFood3} by clicking on the  eye icon in the Executions panel.

@img(src := Resource.img.tutorial.modelOutput.file, width := "100%")



@h2{To go further}
@h3{Get help}

To get help you are more than welcomed to contact the OpenMOLE community on our @aa("forum", href := shared.link.forum) and post your questions.
You can also reach us via our @aa("RocketChat", href := shared.link.chat).


@h3{Next tutorial}
In the @a("next tutorial", href := exploreTuto.file), you will learn how to prepare and run a more complex experiment, in order to explore your model with OpenMOLE.