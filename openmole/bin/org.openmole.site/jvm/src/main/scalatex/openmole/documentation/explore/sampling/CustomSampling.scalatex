@import org.openmole.site.stylesheet._
@import org.openmole.site._
@import org.openmole.site.tools._
@import DocumentationPages._



@h2{Write your own sampling}

You can define a custom sampling in a CSV file and inject it in OpenMOLE.
The provided CSV file must be formatted according to the following template:

@br@br

@hl("""
colD, i
0.7,  8
0.9,  19
0.8,  19
""", "plain")



@h2{Use your custom sampling in OpenMOLE}
@a("check code source",href:="https://github.com/openmole/openmole/blob/14-dev/openmole/plugins/org.openmole.plugin.sampling.csv/src/main/scala/org/openmole/plugin/sampling/csv/CSVSampling.scala#L58:L64")

The @code{CSVSampling} task is used to import your custom sampling into OpenMOLE.
Here is an example of how to use this task in a simple workflow:

@br@br

@hl.openmole("""
val i = Val[Int]
val o = Val[Int]
val d = Val[Double]

// Define the sampling by mapping the columns of the CSV file to OpenMOLE variables
// comma ',' is the default separator, but you can specify a different one using
val mySampling = CSVSampling(workDirectory / "file.csv", separator = ',') set (
  outputs += i.mapped,
  outputs += d mapped "colD",

)

// Define the model, here it just takes i as input
val myModel =
  ScalaTask("val o = i * d") set (
    inputs += (i, d),
    outputs += (i, d, o)
  )

// Define the exploration of myModel for various i values sampled in the file
val exploration = DirectSampling(
  evaluation = myModel hook display,
  sampling = mySampling
)

exploration""")

@br

In this example the column @b{i} in the CSV file is mapped to the OpenMOLE variable @code{i} and @b{colD} is mapped to the OpenMOLE variable @code{d}.

@br

As a sampling, the @code{CSVSampling} task can directly be injected in a @code{DirectSampling} task under the @code{sampling} parameter.
It will generate a different task for each entry in the file.
