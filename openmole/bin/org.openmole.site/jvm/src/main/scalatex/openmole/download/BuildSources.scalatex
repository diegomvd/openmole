@import org.openmole.site._
@import org.openmole.site.tools._
@import org.openmole.site.stylesheet._
@import DocumentationPages._


@h2{First time setup}

@h3{Prerequisites}

You will need the following tools to get a local copy of OpenMOLE running:
@ul
    @li
        A Java 11 (or higher) @b{JDK} (N.B. not only the JRE!). Check your version by typing @code{javac -version} in a terminal.
    @li
        The @aa("git", href := shared.link.git) software and the @aa("LFS", href := shared.link.gitlfs) extension.
    @li
        @aa("SBT", href := shared.link.sbt), the Scala Building Tool.
    @li
        @aa("npm", href := shared.link.npm), library required to build the website.

As a suggestion, we recommend the @aa("IntelliJ IDE", href := shared.link.intelliJ) to edit the Scala source code of the project.


@h3{Get the project}

Clone the OpenMOLE repository by typing the following in your command shell (prompt $>):

@hl("""
$> git lfs install
$> git lfs clone git@github.com:openmole/openmole.git
""", "plain")



@h2{Build the OpenMOLE application}

@h3{Build from sources}
@h6{For the first time}
To build the OpenMOLE application for the first time after cloning it, execute the @code{build.sh} script inside the OpenMOLE directory that you just cloned.

@hl("""
$> cd openmole
$> ./build.sh
""", "plain")

Upon successful completion, the executable is placed under @i{openmole/bin/openmole/target/assemble} and is launched as any executable via the @code{./openmole} command.
The app should then pop up in your default web browser, the URL should be something like @code{http://localhost:44961/app}.


@h6{Re-build the project after an update}
In order to apply the changes after you updated your OpenMOLE version (by doing a @code{git pull} of the project for instance), you need to run successively the @code{clean.sh} and @code{build.sh} scripts.

@hl("""
$> ./clean.sh
$> ./build.sh
""", "plain")


@h3{Create a standalone archive}

You can create a standalone archive of your fresh OpenMOLE build and ship it around by using @code{sbt openmole:tar}.
You will find the resulting archive in @i{bin/openmole/target/openmole.tar.gz}.

@br

Publish the bundles:

@hl("""
$> cd build-system
$> sbt publish
$> cd ../libraries
$> sbt publish
$> cd ../openmole
$> sbt publish""", "plain")


@h3{Compile within Docker}

An easy way to get an OpenMOLE compilation environment up and running is to use Docker.
Once Docker is installed on your machine you can do:

@hl("""
$> git clone """ + shared.link.repo.openMOLEDockerBuild +
"""
$> cd docker-build
$> ./run -v /a/local/path/on/your/system
# You should be in the docker container now, execute
clone
compile
""", "plain")

You can now find the compiled OpenMOLE app in @i{/a/local/path/on/your/system/openmole/openmole/bin/openmole/target/assemble/}.