
@import org.openmole.site.stylesheet._
@import org.openmole.site.tools._
@import org.openmole.site._
@import DocumentationPages._



@h2{Running OpenMOLE with a Graphical User Interface}

The default way to run the OpenMOLE application is with a graphical user interface (GUI).
To do so, just execute the @code{openmole} file in the folder you @aa("downloaded", href := download.file), it will bring up the application in your web browser.
OpenMOLE supports Chrome and Firefox, so if you are using another default web browser please copy-paste the OpenMOLE url @b{http://localhost:[port]} in one of these browsers.

@br

You should see something like below.
The documentation concerning the GUI is provided within the GUI, some basic information can also be found @aa("here", href := gui.file).

@img(src := Resource.img.mole.uiScreenshot.file, width := "100%")



@h3{GUI on a remote machine}

To run OpenMOLE on a remote machine you should execute the following command @code{openmole --remote --port portnumber}.
The first time you launch it, you will be prompted to choose a password.
Then you can remotely connect to OpenMOLE using the url @b{https://remotemachine:portnumber} (note that the "https://" part is important).
When you connect to OpenMOLE through your remote, you will be asked for the password you chose previously.



@h2{Running OpenMOLE in headless mode}
OpenMOLE offers a headless mode for running scripts.
You can enable it thanks to the @code{-s} option: @code{./openmole -s /path/to/you/mole/script}.

@br

In that case, OpenMOLE still asks for your previous cyphering password.
To provide it at launch time, use the @code{-pw} option: @code{./openmole -s /path/to/your/mole/script --password password}.
A better practice is to write this password in a file readable by OpenMOLE only, and use @code{./openmole -s /path/to/your/mole/script --password-file password.txt}.


@h3{Interactive console mode}

OpenMOLE also offers an interactive console mode.
To launch the console execute @code{openmole -c} in a console.
The only differences between the scripts in the console mode and the ones from the editor in the GUI are the ways you launch the execution of a workflow, you cancel it, and you follow the execution progress.

@br

A console workflow is launched like this:

@hl.code("""
  val exploration =
    DirectSampling(
      evaluation = myModel on env,
      sampling = mySampling
    )

  val ex = exploration start
""")

Using the @code{ex} and the @code{env} variables created above, you can follow the progress of the execution by using the commands @code{print(ex)} and @code{print(env)}.
To cancel the execution you should use @code{ex.cancel}.



@h2{Launching options}

OpenMOLE comes with several launching options.
Execute @code{openmole -h} in a terminal to list them all.